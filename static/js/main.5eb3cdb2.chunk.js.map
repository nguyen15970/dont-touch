{"version":3,"sources":["assets/hey_sondn.mp3","App.js","reportWebVitals.js","index.js"],"names":["Howl","src","soundURL","play","App","video","useRef","classifier","mobilenetModel","init","a","console","log","setupCamera","current","knnClassiflier","mobilenet","Promise","resolve","reject","navigator","getUserMedia","mozGetUserMedia","webkitGetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","parseInt","sleep","ms","setTimeout","useEffect","className","ref","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAAe,MAA0B,sC,QCQ7B,IAAIA,OAAK,CACnBC,IAAI,CAACC,KAEDC,OAqFSC,MA9Ef,WAEE,IAAMC,EAAQC,mBACPC,EAAaD,mBACdE,EAAgBF,mBAEhBG,EAAI,uCAAG,sBAAAC,EAAA,6DACXC,QAAQC,IAAI,YADD,SAELC,IAFK,cAGXF,QAAQC,IAAI,wBAEZL,EAAWO,QAAUC,MALV,SAOoBC,MAPpB,OAOXR,EAAeM,QAPJ,OAQXH,QAAQC,IAAI,cACZD,QAAQC,IAAI,8DATD,4CAAH,qDAaJC,EAAc,WAChB,OAAO,IAAII,SAAQ,SAACC,EAAQC,GAC1BC,UAAUC,aAAeD,UAAUC,cACnCD,UAAUE,iBACVF,UAAUG,oBACVH,UAAUI,eAETJ,UAAUC,aAEXD,UAAUC,aACR,CAAChB,OAAM,IACP,SAAAoB,GACEpB,EAAMS,QAAQY,UAAYD,EAC1BpB,EAAMS,QAAQa,iBAAiB,aAAcT,MAE/C,SAAAU,GAAK,OAAIT,EAAOS,MAKlBT,QAMAU,EAAK,uCAAG,WAAMC,GAAN,eAAApB,EAAA,sDACHqB,EAAI,EADD,YACKA,EAjDJ,IAgDD,uBAETpB,QAAQC,IAAR,mBAAwBoB,UAAUD,EAAE,GAlD1B,GAkD4C,KAAtD,MAFS,SAGFE,EAAM,KAHJ,OACsBF,IADtB,0DAAH,sDAMLE,EAAQ,WAAc,IAAbC,EAAY,uDAAP,EAClB,OAAO,IAAIjB,SAAQ,SAAAC,GAAO,OAAIiB,WAAWjB,EAAQgB,OASnD,OANAE,qBAAU,WAER,OADE3B,IACK,eAGN,IAED,sBAAK4B,UAAU,OAAf,UACI,uBACAA,UAAU,QACVC,IAAKjC,IAEL,sBAAKgC,UAAU,UAAf,UACI,wBAAQA,UAAU,MAAME,QAAS,kBAAMV,EAzE1B,cAyEb,qBACA,wBAAQQ,UAAU,MAAME,QAAS,kBAAMV,EAzE9B,YAyET,sBACA,wBAAQQ,UAAU,MAAME,QAAS,kBAAMV,KAAvC,wBC5EGW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5eb3cdb2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hey_sondn.8c2f8e9b.mp3\";","\nimport { Howl } from 'howler';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet'\nimport *  as knnClassiflier from '@tensorflow-models/knn-classifier'\nimport soundURL from './assets/hey_sondn.mp3'\nimport React, { useState, useEffect , useRef} from 'react';\n\nvar sound = new Howl({\n  src:[soundURL]\n})\nsound.play();\n\nconst  NOT_TOUCH_LABEL = 'not_touch'\nconst  TOUCH_LABEL = 'touched'\nconst TRAIN_TIME=50\n\n\nfunction App() {\n\n  const video = useRef();\n  const  classifier=  useRef();\n  const mobilenetModel= useRef();\n\n  const init = async() =>{\n    console.log('init ...')\n    await setupCamera();\n    console.log(\"setup camera success\")\n\n    classifier.current = knnClassiflier.create();\n\n    mobilenetModel.current = await mobilenet.load();\n    console.log('setup done')\n    console.log('Không chạm tay lên mặt vf bấm train 1')\n\n  }\n\n  const setupCamera = () =>{\n      return new Promise((resolve,reject) =>{\n        navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.msGetUserMedia ;\n\n      if(navigator.getUserMedia){\n        \n        navigator.getUserMedia(\n          {video:true},\n          stream =>{\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve)\n          }, \n          error => reject(error)\n        )\n        \n      }\n      else{\n        reject();\n      }\n      })\n  }\n\n\n  const train = async label =>{\n     for(let i = 0 ; i < TRAIN_TIME;  i++ ){\n       console.log(`Progress ${parseInt((i+1) / TRAIN_TIME * 100)}%`)\n        await sleep(100)\n      }\n  }\n  const sleep = (ms = 0 ) => {\n    return new Promise(resolve => setTimeout(resolve,ms))\n  }\n\n  useEffect(() => {\n      init()\n    return () => {\n      \n    }\n  }, [])\n  return (\n    <div className=\"main\">\n        <video\n        className='video'\n        ref={video}\n        ></video>\n        <div className=\"control\">\n            <button className='btn' onClick={() => train(NOT_TOUCH_LABEL)}>Train 1</button>\n            <button className='btn' onClick={() => train(TOUCH_LABEL)}>Traning2</button>\n            <button className='btn' onClick={() => train()}>run</button>\n\n\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}